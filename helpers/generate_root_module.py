#!/usr/bin/env python3

import re
import subprocess
import sys


OUTPUT_OBJECT_PATTERN = re.compile(r"""
        ^output                      # match 'output' literal
        \s+
        "(?P<objname>.*?)"           # Match output name - non-greedy match within quotes
        \s*
        \{                           # '{' literal
        \s*
        (?:                          # Order independent matching of output fields
            (?:                      # Attempt to extract the description field
                description          # Match 'description' literal
                \s*
                =                    # '=' literal
                \s*
                "(?P<desc>.*?)"      # Match and capture quoted string - non-greedy match within quotes
                \s*
            )
            |
            (?:                      # Attempt to extract the value field
                value                # 'value' literal
                \s*
                =                    # '=' literal
                \s*
                "(?P<value>.*?)"     # Match and capture quoted string - non-greedy match within quotes
                \s*
            )
            |
            .*?                      # Match and discard other fields
        ){0,2}                       # Match up to 2 parameters, so we can match the description and value

        \s*
        \}                           # '}' literal
        \s*
""", re.MULTILINE | re.VERBOSE)


VARIABLE_BLOCK_PATTERN = re.compile(r"^variable \"(.*?)\"", re.MULTILINE)


def boilerplate():
    """
    Generate common boilerplate for a Terraform file.

    Returns:
        str: The evaluated boilerplate.
    """
    with open("./test/boilerplate/boilerplate.tf.txt") as fh:
        buf = fh.read()
        buf += "\n\n"
        buf += "// File autogenerated by `helpers/generate_root_module.py`\n"
        return buf


def main_tf(variables):
    """
    Generate the root level `main.tf`.


    Args:
        variables (list[map["name", str]]): A list of variables to pass from the root module
            to the core_project_factory module.

    Returns:
        str: The contents of the file `main.tf`.
    """

    buf = boilerplate()
    buf += """
locals {
  args_missing = "${(var.group_name != "" && var.org_id == "" && var.domain == "") ? 1 : 0}"
}

resource "null_resource" "args_missing" {
  count = "${local.args_missing}"
  "ERROR: Variable `group_name` was passed. Please provide either `org_id` or `domain` variables" = true
}

module "project-factory" {
  source = "modules/core_project_factory"
"""

    for var in variables:
        buf += "{0} = \"${{var.{0}}}\"\n".format(var['name'])

    buf += "}\n"

    return buf


def outputs_tf(outputs):
    """
    Generate the root level `outputs.tf`.

    Args:
        outputs (list[map["name": str, "desc": str]]): A map of parsed outputs from the
            core_project_factory module.

    Returns:
        str: The contents of `outputs.tf`
    """
    buf = boilerplate()
    buf += "\n\n"

    for output in outputs:
        name = output["name"]
        desc = output["desc"]

        buf += "output \"{0}\" {{\n".format(name)
        buf += "value = \"${{module.project-factory.{0}}}\"\n".format(name)

        if desc:
            buf += "description = \"{0}\"\n".format(desc)

        buf += "}\n"

    return buf


def scan_variables(text):
    """
    Parse the variable blocks from `text`

    Args:
        text (str): A terraform config containing variable blocks.

    Returns:
        variables (list[map["name", str]]): A list of parsed variables from the
            given text.
    """
    matches = re.findall(VARIABLE_BLOCK_PATTERN, text)
    variables = [
        {"name": match}
        for match in matches
    ]

    return variables


def scan_outputs(text):
    """
    Parse the output blocks from `text`

    Args:
        text (str): A terraform config containing output blocks.

    Returns:
        list[map["name": str, "desc": str]]): A map of parsed outputs from the
            given text.
    """
    matches = re.findall(OUTPUT_OBJECT_PATTERN, text)

    objs = [
        {
            "name": match[0],
            "desc": match[1] if match[1] != "" else None,
            "value": match[2]
        }
        for match in matches
    ]

    return objs


def main(argv):
    with open("./modules/core_project_factory/variables.tf") as fh:
        variables_text = fh.read()

    with open("./modules/core_project_factory/outputs.tf") as fh:
        outputs_text = fh.read()

    variables = scan_variables(variables_text)
    outputs = scan_outputs(outputs_text)

    with open("./variables.tf", "w") as fh:
        # Copy `variables.tf` without modification
        fh.write(variables_text)

    with open("main.tf", "w") as fh:
        fh.write(main_tf(variables))

    with open("outputs.tf", "w") as fh:
        fh.write(outputs_tf(outputs))

    subprocess.run(["terraform", "fmt"])


if __name__ == "__main__":
    main(sys.argv)
